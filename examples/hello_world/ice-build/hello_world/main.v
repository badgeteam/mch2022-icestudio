// Code generated by Icestudio 0.9.2w202207240307

`default_nettype none

//---- Top entity
module main (
 input vclk,
 output v34f0b4,
 output vb1553a,
 output v77c119
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 assign v34f0b4 = w0;
 assign vb1553a = w1;
 assign v77c119 = w2;
 assign w3 = vclk;
 vc2df49 v1916ab (
  .v4642b6(w0),
  .v214193(w1),
  .v209c6e(w2),
  .v6dda25(w3)
 );
endmodule

//---- Top entity
module vc2df49 (
 input v6dda25,
 output v4642b6,
 output v214193,
 output v209c6e
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 assign w0 = v6dda25;
 assign v4642b6 = w1;
 assign v214193 = w2;
 assign v209c6e = w3;
 vc2df49_vcbf0b3 vcbf0b3 (
  .clk(w0),
  .rgb0(w1),
  .rgb1(w2),
  .rgb2(w3)
 );
endmodule

//---------------------------------------------------
//-- Generic-comp-clk
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Generic component with clk input
//---------------------------------------------------

module vc2df49_vcbf0b3 (
 input clk,
 output rgb0,
 output rgb1,
 output rgb2
);
 // ----------------------------------------------------------
   //   Simple gray counter blinky
   // ----------------------------------------------------------
 
   reg [31:0] counter;
 
   always @(posedge clk) counter <= counter + 1;
 
   wire red, green, blue;
 
   assign {blue, green, red} = counter[25:23] ^ counter[25:24];
 
   // ----------------------------------------------------------
   // Instantiate iCE40 LED driver hard logic.
   // ----------------------------------------------------------
   //
   // Note that it's possible to drive the LEDs directly,
   // however that is not current-limited and results in
   // overvolting the red LED.
   //
   // See also:
   // https://www.latticesemi.com/-/media/LatticeSemi/Documents/ApplicationNotes/IK/ICE40LEDDriverUsageGuide.ashx?document_id=50668
 
   SB_RGBA_DRV #(
       .CURRENT_MODE("0b1"),       // half current
       .RGB0_CURRENT("0b000011"),  // 4 mA
       .RGB1_CURRENT("0b000011"),  // 4 mA
       .RGB2_CURRENT("0b000011")   // 4 mA
   ) RGBA_DRIVER (
       .CURREN(1'b1),
       .RGBLEDEN(1'b1),
       .RGB1PWM(red),
       .RGB2PWM(green),
       .RGB0PWM(blue),
       .RGB0(rgb0),
       .RGB1(rgb1),
       .RGB2(rgb2)
   );
endmodule
